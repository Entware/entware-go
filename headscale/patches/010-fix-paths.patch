--- a/cmd/headscale/cli/dump_config.go
+++ b/cmd/headscale/cli/dump_config.go
@@ -13,13 +13,13 @@ func init() {
 
 var dumpConfigCmd = &cobra.Command{
 	Use:    "dumpConfig",
-	Short:  "dump current config to /etc/headscale/config.dump.yaml, integration test only",
+	Short:  "dump current config to /opt/etc/headscale/config.dump.yaml, integration test only",
 	Hidden: true,
 	Args: func(cmd *cobra.Command, args []string) error {
 		return nil
 	},
 	Run: func(cmd *cobra.Command, args []string) {
-		err := viper.WriteConfigAs("/etc/headscale/config.dump.yaml")
+		err := viper.WriteConfigAs("/opt/etc/headscale/config.dump.yaml")
 		if err != nil {
 			//nolint
 			fmt.Println("Failed to dump config")
--- a/cmd/headscale/cli/root.go
+++ b/cmd/headscale/cli/root.go
@@ -33,7 +33,7 @@ func init() {
 
 	cobra.OnInitialize(initConfig)
 	rootCmd.PersistentFlags().
-		StringVarP(&cfgFile, "config", "c", "", "config file (default is /etc/headscale/config.yaml)")
+		StringVarP(&cfgFile, "config", "c", "", "config file (default is /opt/etc/headscale/config.yaml)")
 	rootCmd.PersistentFlags().
 		StringP("output", "o", "", "Output format. Empty for human-readable, 'json', 'json-line' or 'yaml'")
 	rootCmd.PersistentFlags().
--- a/cmd/headscale/headscale_test.go
+++ b/cmd/headscale/headscale_test.go
@@ -58,7 +58,7 @@ func (*Suite) TestConfigFileLoading(c *c
 	c.Assert(viper.GetString("listen_addr"), check.Equals, "127.0.0.1:8080")
 	c.Assert(viper.GetString("metrics_listen_addr"), check.Equals, "127.0.0.1:9090")
 	c.Assert(viper.GetString("database.type"), check.Equals, "sqlite")
-	c.Assert(viper.GetString("database.sqlite.path"), check.Equals, "/var/lib/headscale/db.sqlite")
+	c.Assert(viper.GetString("database.sqlite.path"), check.Equals, "/opt/var/lib/headscale/db.sqlite")
 	c.Assert(viper.GetString("tls_letsencrypt_hostname"), check.Equals, "")
 	c.Assert(viper.GetString("tls_letsencrypt_listen"), check.Equals, ":http")
 	c.Assert(viper.GetString("tls_letsencrypt_challenge_type"), check.Equals, "HTTP-01")
@@ -100,7 +100,7 @@ func (*Suite) TestConfigLoading(c *check
 	c.Assert(viper.GetString("listen_addr"), check.Equals, "127.0.0.1:8080")
 	c.Assert(viper.GetString("metrics_listen_addr"), check.Equals, "127.0.0.1:9090")
 	c.Assert(viper.GetString("database.type"), check.Equals, "sqlite")
-	c.Assert(viper.GetString("database.sqlite.path"), check.Equals, "/var/lib/headscale/db.sqlite")
+	c.Assert(viper.GetString("database.sqlite.path"), check.Equals, "/opt/var/lib/headscale/db.sqlite")
 	c.Assert(viper.GetString("tls_letsencrypt_hostname"), check.Equals, "")
 	c.Assert(viper.GetString("tls_letsencrypt_listen"), check.Equals, ":http")
 	c.Assert(viper.GetString("tls_letsencrypt_challenge_type"), check.Equals, "HTTP-01")
--- a/hscontrol/types/config.go
+++ b/hscontrol/types/config.go
@@ -265,9 +265,9 @@ func LoadConfig(path string, isFile bool
 	} else {
 		viper.SetConfigName("config")
 		if path == "" {
-			viper.AddConfigPath("/etc/headscale/")
+			viper.AddConfigPath("/opt/etc/headscale/")
 			viper.AddConfigPath("$HOME/.headscale")
-			viper.AddConfigPath(".")
+			// viper.AddConfigPath(".")
 		} else {
 			// For testing
 			viper.AddConfigPath(path)
@@ -281,7 +281,7 @@ func LoadConfig(path string, isFile bool
 
 	viper.SetDefault("policy.mode", "file")
 
-	viper.SetDefault("tls_letsencrypt_cache_dir", "/var/www/.cache")
+	viper.SetDefault("tls_letsencrypt_cache_dir", "/opt/var/cache")
 	viper.SetDefault("tls_letsencrypt_challenge_type", HTTP01ChallengeType)
 
 	viper.SetDefault("log.level", "info")
@@ -298,7 +298,7 @@ func LoadConfig(path string, isFile bool
 	viper.SetDefault("derp.server.stun.enabled", true)
 	viper.SetDefault("derp.server.automatically_add_embedded_derp_region", true)
 
-	viper.SetDefault("unix_socket", "/var/run/headscale/headscale.sock")
+	viper.SetDefault("unix_socket", "/opt/var/run/headscale/headscale.sock")
 	viper.SetDefault("unix_socket_permission", "0o770")
 
 	viper.SetDefault("grpc_listen_addr", ":50443")
--- a/integration/hsic/config.go
+++ b/integration/hsic/config.go
@@ -4,9 +4,9 @@ import "github.com/juanfont/headscale/hs
 
 func MinimumConfigYAML() string {
 	return `
-private_key_path: /tmp/private.key
+private_key_path: /opt/tmp/private.key
 noise:
-  private_key_path: /tmp/noise_private.key
+  private_key_path: /opt/tmp/noise_private.key
 `
 }
 
@@ -15,7 +15,7 @@ func DefaultConfigEnv() map[string]strin
 		"HEADSCALE_LOG_LEVEL":                         "trace",
 		"HEADSCALE_POLICY_PATH":                       "",
 		"HEADSCALE_DATABASE_TYPE":                     "sqlite",
-		"HEADSCALE_DATABASE_SQLITE_PATH":              "/tmp/integration_test_db.sqlite3",
+		"HEADSCALE_DATABASE_SQLITE_PATH":              "/opt/tmp/integration_test_db.sqlite3",
 		"HEADSCALE_DATABASE_DEBUG":                    "0",
 		"HEADSCALE_DATABASE_GORM_SLOW_THRESHOLD":      "1",
 		"HEADSCALE_EPHEMERAL_NODE_INACTIVITY_TIMEOUT": "30m",
@@ -25,8 +25,8 @@ func DefaultConfigEnv() map[string]strin
 		"HEADSCALE_DNS_MAGIC_DNS":                     "true",
 		"HEADSCALE_DNS_OVERRIDE_LOCAL_DNS":            "false",
 		"HEADSCALE_DNS_NAMESERVERS_GLOBAL":            "127.0.0.11 1.1.1.1",
-		"HEADSCALE_PRIVATE_KEY_PATH":                  "/tmp/private.key",
-		"HEADSCALE_NOISE_PRIVATE_KEY_PATH":            "/tmp/noise_private.key",
+		"HEADSCALE_PRIVATE_KEY_PATH":                  "/opt/tmp/private.key",
+		"HEADSCALE_NOISE_PRIVATE_KEY_PATH":            "/opt/tmp/noise_private.key",
 		"HEADSCALE_METRICS_LISTEN_ADDR":               "0.0.0.0:9090",
 		"HEADSCALE_DERP_URLS":                         "https://controlplane.tailscale.com/derpmap/default",
 		"HEADSCALE_DERP_AUTO_UPDATE_ENABLED":          "false",
--- a/integration/hsic/hsic.go
+++ b/integration/hsic/hsic.go
@@ -34,10 +34,10 @@ import (
 const (
 	hsicHashLength                = 6
 	dockerContextPath             = "../."
-	caCertRoot                    = "/usr/local/share/ca-certificates"
-	aclPolicyPath                 = "/etc/headscale/acl.hujson"
-	tlsCertPath                   = "/etc/headscale/tls.cert"
-	tlsKeyPath                    = "/etc/headscale/tls.key"
+	caCertRoot                    = "/opt/share/ca-certificates"
+	aclPolicyPath                 = "/opt/etc/headscale/acl.hujson"
+	tlsCertPath                   = "/opt/etc/headscale/tls.cert"
+	tlsKeyPath                    = "/opt/etc/headscale/tls.key"
 	headscaleDefaultPort          = 8080
 	IntegrationTestDockerFileName = "Dockerfile.integration"
 )
@@ -222,7 +222,7 @@ func WithEmbeddedDERPServerOnly() Option
 		hsic.env["HEADSCALE_DERP_SERVER_REGION_CODE"] = "headscale"
 		hsic.env["HEADSCALE_DERP_SERVER_REGION_NAME"] = "Headscale Embedded DERP"
 		hsic.env["HEADSCALE_DERP_SERVER_STUN_LISTEN_ADDR"] = "0.0.0.0:3478"
-		hsic.env["HEADSCALE_DERP_SERVER_PRIVATE_KEY_PATH"] = "/tmp/derp.key"
+		hsic.env["HEADSCALE_DERP_SERVER_PRIVATE_KEY_PATH"] = "/opt/tmp/derp.key"
 
 		// Envknob for enabling DERP debug logs
 		hsic.env["DERP_DEBUG_LOGS"] = "true"
@@ -241,10 +241,10 @@ func WithDERPConfig(derpMap tailcfg.DERP
 			return
 		}
 
-		hsic.env["HEADSCALE_DERP_PATHS"] = "/etc/headscale/derp.yml"
+		hsic.env["HEADSCALE_DERP_PATHS"] = "/opt/etc/headscale/derp.yml"
 		hsic.filesInContainer = append(hsic.filesInContainer,
 			fileInContainer{
-				path:     "/etc/headscale/derp.yml",
+				path:     "/opt/etc/headscale/derp.yml",
 				contents: contents,
 			})
 
@@ -339,8 +339,8 @@ func New(
 
 	env := []string{
 		"HEADSCALE_DEBUG_PROFILING_ENABLED=1",
-		"HEADSCALE_DEBUG_PROFILING_PATH=/tmp/profile",
-		"HEADSCALE_DEBUG_DUMP_MAPRESPONSE_PATH=/tmp/mapresponses",
+		"HEADSCALE_DEBUG_PROFILING_PATH=/opt/tmp/profile",
+		"HEADSCALE_DEBUG_DUMP_MAPRESPONSE_PATH=/opt/tmp/mapresponses",
 		"HEADSCALE_DEBUG_DEADLOCK=1",
 		"HEADSCALE_DEBUG_DEADLOCK_TIMEOUT=5s",
 		"HEADSCALE_DEBUG_HIGH_CARDINALITY_METRICS=1",
@@ -369,7 +369,7 @@ func New(
 		// Cmd:          []string{"headscale", "serve"},
 		// TODO(kradalby): Get rid of this hack, we currently need to give us some
 		// to inject the headscale configuration further down.
-		Entrypoint: []string{"/bin/bash", "-c", "/bin/sleep 3 ; update-ca-certificates ; headscale serve ; /bin/sleep 30"},
+		Entrypoint: []string{"/bin/sh", "-c", "sleep 3 ; update-ca-certificates ; headscale serve ; sleep 30"},
 		Env:        env,
 	}
 
@@ -415,7 +415,7 @@ func New(
 		}
 	}
 
-	err = hsic.WriteFile("/etc/headscale/config.yaml", []byte(MinimumConfigYAML()))
+	err = hsic.WriteFile("/opt/etc/headscale/config.yaml", []byte(MinimumConfigYAML()))
 	if err != nil {
 		return nil, fmt.Errorf("failed to write headscale config to container: %w", err)
 	}
@@ -467,7 +467,7 @@ func (t *HeadscaleInContainer) hasTLS()
 
 // Shutdown stops and cleans up the Headscale container.
 func (t *HeadscaleInContainer) Shutdown() (string, string, error) {
-	stdoutPath, stderrPath, err := t.SaveLog("/tmp/control")
+	stdoutPath, stderrPath, err := t.SaveLog("/opt/tmp/control")
 	if err != nil {
 		log.Printf(
 			"Failed to save log from control: %s",
@@ -475,7 +475,7 @@ func (t *HeadscaleInContainer) Shutdown(
 		)
 	}
 
-	err = t.SaveMetrics(fmt.Sprintf("/tmp/control/%s_metrics.txt", t.hostname))
+	err = t.SaveMetrics(fmt.Sprintf("/opt/tmp/control/%s_metrics.txt", t.hostname))
 	if err != nil {
 		log.Printf(
 			"Failed to metrics from control: %s",
@@ -494,7 +494,7 @@ func (t *HeadscaleInContainer) Shutdown(
 		)
 	}
 
-	err = t.SaveProfile("/tmp/control")
+	err = t.SaveProfile("/opt/tmp/control")
 	if err != nil {
 		log.Printf(
 			"Failed to save profile from control: %s",
@@ -502,7 +502,7 @@ func (t *HeadscaleInContainer) Shutdown(
 		)
 	}
 
-	err = t.SaveMapResponses("/tmp/control")
+	err = t.SaveMapResponses("/opt/tmp/control")
 	if err != nil {
 		log.Printf(
 			"Failed to save mapresponses from control: %s",
@@ -512,7 +512,7 @@ func (t *HeadscaleInContainer) Shutdown(
 
 	// We dont have a database to save if we use postgres
 	if !t.postgres {
-		err = t.SaveDatabase("/tmp/control")
+		err = t.SaveDatabase("/opt/tmp/control")
 		if err != nil {
 			log.Printf(
 				"Failed to save database from control: %s",
@@ -561,7 +561,7 @@ func (t *HeadscaleInContainer) SaveMetri
 }
 
 func (t *HeadscaleInContainer) SaveProfile(savePath string) error {
-	tarFile, err := t.FetchPath("/tmp/profile")
+	tarFile, err := t.FetchPath("/opt/tmp/profile")
 	if err != nil {
 		return err
 	}
@@ -579,7 +579,7 @@ func (t *HeadscaleInContainer) SaveProfi
 }
 
 func (t *HeadscaleInContainer) SaveMapResponses(savePath string) error {
-	tarFile, err := t.FetchPath("/tmp/mapresponses")
+	tarFile, err := t.FetchPath("/opt/tmp/mapresponses")
 	if err != nil {
 		return err
 	}
@@ -597,7 +597,7 @@ func (t *HeadscaleInContainer) SaveMapRe
 }
 
 func (t *HeadscaleInContainer) SaveDatabase(savePath string) error {
-	tarFile, err := t.FetchPath("/tmp/integration_test_db.sqlite3")
+	tarFile, err := t.FetchPath("/opt/tmp/integration_test_db.sqlite3")
 	if err != nil {
 		return err
 	}
--- a/integration/tsic/tsic.go
+++ b/integration/tsic/tsic.go
@@ -35,7 +35,7 @@ const (
 	defaultPingTimeout   = 300 * time.Millisecond
 	defaultPingCount     = 10
 	dockerContextPath    = "../."
-	caCertRoot           = "/usr/local/share/ca-certificates"
+	caCertRoot           = "/opt/share/ca-certificates"
 	dockerExecuteTimeout = 60 * time.Second
 )
 
@@ -228,7 +228,7 @@ func New(
 		withEntrypoint: []string{
 			"/bin/sh",
 			"-c",
-			"/bin/sleep 3 ; update-ca-certificates ; tailscaled --tun=tsdev --verbose=10",
+			"sleep 3 ; update-ca-certificates ; tailscaled --tun=tsdev --verbose=10",
 		},
 	}
 
@@ -360,7 +360,7 @@ func New(
 
 // Shutdown stops and cleans up the Tailscale container.
 func (t *TailscaleInContainer) Shutdown() (string, string, error) {
-	stdoutPath, stderrPath, err := t.SaveLog("/tmp/control")
+	stdoutPath, stderrPath, err := t.SaveLog("/opt/tmp/control")
 	if err != nil {
 		log.Printf(
 			"Failed to save log from %s: %s",
@@ -640,9 +640,9 @@ func (t *TailscaleInContainer) Status(sa
 		return nil, fmt.Errorf("failed to unmarshal tailscale status: %w", err)
 	}
 
-	err = os.WriteFile(fmt.Sprintf("/tmp/control/%s_status.json", t.hostname), []byte(result), 0o755)
+	err = os.WriteFile(fmt.Sprintf("/opt/tmp/control/%s_status.json", t.hostname), []byte(result), 0o755)
 	if err != nil {
-		return nil, fmt.Errorf("status netmap to /tmp/control: %w", err)
+		return nil, fmt.Errorf("status netmap to /opt/tmp/control: %w", err)
 	}
 
 	return &status, err
@@ -699,9 +699,9 @@ func (t *TailscaleInContainer) Netmap()
 		return nil, fmt.Errorf("failed to unmarshal tailscale netmap: %w", err)
 	}
 
-	err = os.WriteFile(fmt.Sprintf("/tmp/control/%s_netmap.json", t.hostname), []byte(result), 0o755)
+	err = os.WriteFile(fmt.Sprintf("/opt/tmp/control/%s_netmap.json", t.hostname), []byte(result), 0o755)
 	if err != nil {
-		return nil, fmt.Errorf("saving netmap to /tmp/control: %w", err)
+		return nil, fmt.Errorf("saving netmap to /opt/tmp/control: %w", err)
 	}
 
 	return &nm, err
