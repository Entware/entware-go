--- a/src/github.com/syncthing/syncthing/lib/locations/locations.go
+++ b/src/github.com/syncthing/syncthing/lib/locations/locations.go
@@ -8,9 +8,7 @@
 
 import (
 	"fmt"
-	"os"
 	"path/filepath"
-	"runtime"
 	"strings"
 	"time"
 
@@ -132,61 +130,18 @@
 // out by various the environment variables present on each platform, or dies
 // trying.
 func defaultConfigDir(userHome string) string {
-	switch runtime.GOOS {
-	case "windows":
-		if p := os.Getenv("LocalAppData"); p != "" {
-			return filepath.Join(p, "Syncthing")
-		}
-		return filepath.Join(os.Getenv("AppData"), "Syncthing")
-
-	case "darwin":
-		return filepath.Join(userHome, "Library/Application Support/Syncthing")
-
-	default:
-		if xdgCfg := os.Getenv("XDG_CONFIG_HOME"); xdgCfg != "" {
-			return filepath.Join(xdgCfg, "syncthing")
-		}
-		return filepath.Join(userHome, ".config/syncthing")
-	}
+	return "/opt/etc/syncthing"
 }
 
 // defaultDataDir returns the default data directory, which usually is the
 // config directory but might be something else.
 func defaultDataDir(userHome, config string) string {
-	switch runtime.GOOS {
-	case "windows", "darwin":
-		return config
-
-	default:
-		// If a database exists at the "normal" location, use that anyway.
-		if _, err := os.Lstat(filepath.Join(config, LevelDBDir)); err == nil {
-			return config
-		}
-		// Always use this env var, as it's explicitly set by the user
-		if xdgHome := os.Getenv("XDG_DATA_HOME"); xdgHome != "" {
-			return filepath.Join(xdgHome, "syncthing")
-		}
-		// Only use the XDG default, if a syncthing specific dir already
-		// exists. Existence of ~/.local/share is not deemed enough, as
-		// it may also exist erroneously on non-XDG systems.
-		xdgDefault := filepath.Join(userHome, ".local/share/syncthing")
-		if _, err := os.Lstat(xdgDefault); err == nil {
-			return xdgDefault
-		}
-		// FYI: XDG_DATA_DIRS is not relevant, as it is for system-wide
-		// data dirs, not user specific ones.
-		return config
-	}
+	return "/opt/etc/syncthing"
 }
 
 // userHomeDir returns the user's home directory, or dies trying.
 func userHomeDir() string {
-	userHome, err := fs.ExpandTilde("~")
-	if err != nil {
-		fmt.Println(err)
-		panic("Failed to get user home dir")
-	}
-	return userHome
+	return "/opt"
 }
 
 func GetTimestamped(key LocationEnum) string {
